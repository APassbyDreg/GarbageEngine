#include "Common/Pipeline/FragmentInputs.gsh"
#include "Common/ViewUniform.gsh"

#ifndef MAX_INSTANCE_COUNT
#define MAX_INSTANCE_COUNT 64
#endif

struct VertexInputs
{
    [[vk::location(0)]] float3 position : POSITION;
    [[vk::location(1)]] float3 normal   : NORMAL;
    [[vk::location(2)]] float3 tangent  : TANGENT;
    [[vk::location(3)]] uint flags      : TEXCOORD1;
    [[vk::location(4)]] float2 uv0      : TEXCOORD0;
};

struct InstanceData
{
    float4x4 model_mat;
    float4x4 t_inv_model_mat;
};

[[vk::binding(0, 4)]]
StructuredBuffer<InstanceData> instance_data;

FragmentInputs VSMain(VertexInputs i, uint instanceID : SV_InstanceID)
{
    FragmentInputs o;
#ifdef SHADOW_MAPPING_PASS
    o.posCS = TransformVertex(HomogeneousTransform(i.position, instance_data[instanceID].model_mat));
#else
    o.posWS = HomogeneousTransform(i.position, instance_data[instanceID].model_mat);
    o.normalWS = HomogeneousTransformVector(i.normal, instance_data[instanceID].t_inv_model_mat);
    o.tangentWS = HomogeneousTransformVector(i.tangent, instance_data[instanceID].t_inv_model_mat);
    o.uv = i.uv0;
    o.posCS = TransformVertex(o.posWS);
    o.instanceID = instanceID;
    o.flags = i.flags;
#endif
    return o;
}
